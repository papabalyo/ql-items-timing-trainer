;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name ql-items-timing-practice.engine, :imports nil, :requires nil, :uses nil, :defs {next-time-pure {:protocol-inline nil, :meta {:file "/Users/kishanov/code/ql-items-timing-practice/src/cljs/ql_items_timing_practice/engine.cljs", :line 56, :column 8, :end-line 56, :end-column 22, :private true, :arglists (quote ([items-map pick-up-intervals item-key pick-up-time]))}, :private true, :name ql-items-timing-practice.engine/next-time-pure, :variadic false, :file "/Users/kishanov/code/ql-items-timing-practice/src/cljs/ql_items_timing_practice/engine.cljs", :end-column 22, :method-params ([items-map pick-up-intervals item-key pick-up-time]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 4, :fn-var true, :arglists (quote ([items-map pick-up-intervals item-key pick-up-time]))}, items-map {:name ql-items-timing-practice.engine/items-map, :file "/Users/kishanov/code/ql-items-timing-practice/src/cljs/ql_items_timing_practice/engine.cljs", :line 42, :column 1, :end-line 42, :end-column 15, :meta {:file "/Users/kishanov/code/ql-items-timing-practice/src/cljs/ql_items_timing_practice/engine.cljs", :line 42, :column 6, :end-line 42, :end-column 15}}, health-bubbles {:name ql-items-timing-practice.engine/health-bubbles, :file "/Users/kishanov/code/ql-items-timing-practice/src/cljs/ql_items_timing_practice/engine.cljs", :line 19, :column 1, :end-line 19, :end-column 20, :meta {:file "/Users/kishanov/code/ql-items-timing-practice/src/cljs/ql_items_timing_practice/engine.cljs", :line 19, :column 6, :end-line 19, :end-column 20}}, map-items {:protocol-inline nil, :meta {:file "/Users/kishanov/code/ql-items-timing-practice/src/cljs/ql_items_timing_practice/engine.cljs", :line 28, :column 7, :end-line 28, :end-column 16, :arglists (quote ([item-keys type]))}, :name ql-items-timing-practice.engine/map-items, :variadic false, :file "/Users/kishanov/code/ql-items-timing-practice/src/cljs/ql_items_timing_practice/engine.cljs", :end-column 16, :method-params ([item-keys type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 2, :fn-var true, :arglists (quote ([item-keys type]))}, next-time {:name ql-items-timing-practice.engine/next-time, :file "/Users/kishanov/code/ql-items-timing-practice/src/cljs/ql_items_timing_practice/engine.cljs", :line 68, :column 1, :end-line 68, :end-column 15, :meta {:file "/Users/kishanov/code/ql-items-timing-practice/src/cljs/ql_items_timing_practice/engine.cljs", :line 68, :column 6, :end-line 68, :end-column 15}}, valid-sec-value? {:protocol-inline nil, :meta {:file "/Users/kishanov/code/ql-items-timing-practice/src/cljs/ql_items_timing_practice/engine.cljs", :line 49, :column 8, :end-line 49, :end-column 24, :private true, :arglists (quote ([n]))}, :private true, :name ql-items-timing-practice.engine/valid-sec-value?, :variadic false, :file "/Users/kishanov/code/ql-items-timing-practice/src/cljs/ql_items_timing_practice/engine.cljs", :end-column 24, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}, new-random-item {:name ql-items-timing-practice.engine/new-random-item, :file "/Users/kishanov/code/ql-items-timing-practice/src/cljs/ql_items_timing_practice/engine.cljs", :line 77, :column 1, :end-line 77, :end-column 21, :meta {:file "/Users/kishanov/code/ql-items-timing-practice/src/cljs/ql_items_timing_practice/engine.cljs", :line 77, :column 6, :end-line 77, :end-column 21}}, armors {:name ql-items-timing-practice.engine/armors, :file "/Users/kishanov/code/ql-items-timing-practice/src/cljs/ql_items_timing_practice/engine.cljs", :line 10, :column 1, :end-line 10, :end-column 12, :meta {:file "/Users/kishanov/code/ql-items-timing-practice/src/cljs/ql_items_timing_practice/engine.cljs", :line 10, :column 6, :end-line 10, :end-column 12}}, pick-up-intervals {:name ql-items-timing-practice.engine/pick-up-intervals, :file "/Users/kishanov/code/ql-items-timing-practice/src/cljs/ql_items_timing_practice/engine.cljs", :line 4, :column 1, :end-line 4, :end-column 23, :meta {:file "/Users/kishanov/code/ql-items-timing-practice/src/cljs/ql_items_timing_practice/engine.cljs", :line 4, :column 6, :end-line 4, :end-column 23}}, random-item-pickup {:protocol-inline nil, :meta {:file "/Users/kishanov/code/ql-items-timing-practice/src/cljs/ql_items_timing_practice/engine.cljs", :line 72, :column 8, :end-line 72, :end-column 26, :private true, :arglists (quote ([items-map]))}, :private true, :name ql-items-timing-practice.engine/random-item-pickup, :variadic false, :file "/Users/kishanov/code/ql-items-timing-practice/src/cljs/ql_items_timing_practice/engine.cljs", :end-column 26, :method-params ([items-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 1, :fn-var true, :arglists (quote ([items-map]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:rh contains? every? set :mh items-map = :ga :ya :item :time valid-sec-value? pick-up-time keyword? :ra % item-key type :label vals pick-up-intervals :health :armor partial keys distinct? count item-keys}, :order [:armor :health :ra :ya :ga :label :mh :rh keyword? type every? item-keys distinct? = set keys % partial vals count contains? items-map item-key pick-up-intervals valid-sec-value? pick-up-time :item :time]}, :doc nil}